from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State

from config import TOKEN
import logging
from keyboards import *
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from texts import *

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
ID = '1111'


class ProfileStatesGroup(StatesGroup):
    photo = State()
    lesson = State()
    mail = State()


@dp.message_handler(Text(equals='–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ'))
async def main_menu(message: types.Message):
    await message.answer('‚¨áÔ∏è–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ‚¨áÔ∏è', reply_markup=menu_kb)
    await message.delete()


@dp.callback_query_handler()
async def guarantee(callback: types.CallbackQuery):
    if callback.data == 'guarantee':
        await callback.message.answer(garantee, reply_markup=back_menu)
    elif callback.data == 'dop_info':
        await callback.message.answer(dop1)
        await callback.message.answer(dop2)
        await callback.message.answer(dop3, reply_markup=back_menu)
    elif callback.data == 'back':
        await callback.message.answer('‚¨áÔ∏è–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ‚¨áÔ∏è', reply_markup=menu_kb)
    elif callback.data == 'payment':
        await callback.message.answer("–¶–ï–ù–ê –î–û–°–¢–£–ü–ê –í –û–î–ù–£ –ì–†–£–ü–ü–£:\nüîπ–ï–ì–≠ - 1199 —Ä—É–±–ª–µ–π.\nüîπ–û–ì–≠ - 899 "
                                      "—Ä—É–±–ª–µ–π.\nüîπ–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—á–∏–Ω–µ–Ω–∏–µ - 599‚ÇΩ\nüîπ–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ 499‚ÇΩ\n‚ö†Ô∏è–ù–∞ –∫–∞–∂–¥—ã–π "
                                      "–ø—Ä–µ–¥–º–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞\n‚ö†Ô∏è–ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ",
                                      reply_markup=pay_menu)
    elif callback.data == 'ege':
        await callback.message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—Ä–µ–¥–º–µ—Ç! –ï–ì–≠‚¨áÔ∏è', reply_markup=ege_lessons_ikb)
    elif callback.data == 'oge':
        await callback.message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –≤–∞–º –ø—Ä–µ–¥–º–µ—Ç—ã!', reply_markup=ege_lessons_ikb)
    elif callback.data == 'sochen':
        await callback.message.answer(otvet, reply_markup=start_fsm)
    elif callback.data == 'sobes':
        await callback.message.answer(otvet, reply_markup=start_fsm)
    elif callback.data == 'postoplata':
        await callback.message.answer(otvet, reply_markup=start_fsm)


@dp.message_handler(commands=['take_answers'])
async def send_create(message: types.Message):
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ!")
    await ProfileStatesGroup.photo.set()


@dp.message_handler(lambda message: not message.photo, state=ProfileStatesGroup.photo)
async def check_photo(message: types.Message):
    await message.reply('–≠—Ç–æ –Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç!')


@dp.message_handler(content_types='photo', state=ProfileStatesGroup.photo)
async def get_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã!\n'
                         '–ï—Å–ª–∏ —Ç—ã –æ–ø–ª–∞—Ç–∏–ª –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, —Ç–æ —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏!')
    await ProfileStatesGroup.next()


@dp.message_handler(state=ProfileStatesGroup.lesson)
async def get_mail(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['lesson'] = message.text
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π email!')
    await ProfileStatesGroup.next()


@dp.message_handler(state=ProfileStatesGroup.mail)
async def get_mail(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['mail'] = message.text
    await bot.send_photo(ID, photo=data['photo'], caption=data['mail'] + '\n' + data['lesson'])
    await message.answer('–ñ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É! –°–∫–æ—Ä–æ —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤—è—Ç –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!')
    await state.finish()


@dp.message_handler(commands=['start'])
async def send_start(message: types.Message):
    await message.answer(welcome,
                         reply_markup=start_kb)
    await message.delete()


@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.finish()
    await message.reply('–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
